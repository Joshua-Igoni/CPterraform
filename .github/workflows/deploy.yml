name: Terraform Deploy

# ────────────────────────────────────────────────────────────────
# Triggers
# ────────────────────────────────────────────────────────────────
on:
  # Called from the _app_ repo via `gh workflow run …`
  workflow_dispatch:
    inputs:
      image_uri:
        description: "ECR image URI to deploy"
        required: true
  # Optional: open a PR in infra repo to see the plan before merge
  pull_request:
    paths: ["**.tf", "**/*.tfvars"]

# ────────────────────────────────────────────────────────────────
# Global defaults
# ────────────────────────────────────────────────────────────────
env:
  TF_IN_AUTOMATION: "true"
  AWS_REGION: ${{ vars.AWS_REGION }} 

permissions:
  id-token: write   # OIDC auth
  contents: read

jobs:
  terraform:
    name: "Terraform Apply"
    # only run the apply step on workflow_dispatch from default branch
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.ref == 'refs/heads/edge'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5        
        terraform_wrapper: false          

    - name: Export Terraform variables to runner env
      run: |
        echo "TF_VAR_container_image=${{ github.event.inputs.image_uri }}" >> "$GITHUB_ENV"
        echo "TF_VAR_db_password=${{ secrets.DB_PASSWORD }}"             >> "$GITHUB_ENV"

    - name: Terraform Init
      run: terraform init -upgrade

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -no-color -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Export TF outputs for later jobs
      id: tf-out
      run: |
        echo "bucket=$(terraform output -raw static_bucket_name)" >> "$GITHUB_OUTPUT"
        echo "distro=$(terraform output -raw cloudfront_domain_name)" >> "$GITHUB_OUTPUT"
        echo "distro_id=$(terraform output -raw cloudfront_distribution_id)"  >> "$GITHUB_OUTPUT"
    
    - name: Collect & upload static assets
      env:
        AWS_REGION:  ${{ env.AWS_REGION }}
        IMAGE_URI:   ${{ github.event.inputs.image_uri }}          
        STATIC_BUCKET:  ${{ steps.tf-out.outputs.bucket }}         
        CDN_DOMAIN:     ${{ steps.tf-out.outputs.distro }}         
      run: |
       mkdir -p static_out                       # host dir that will get the files

       echo "▶︎ collectstatic → ./static_out"
       docker run --rm \
          -e STATIC_BUCKET="$STATIC_BUCKET" \
          -e CDN_DOMAIN="$CDN_DOMAIN" \
          -v "$PWD/static_out:/app/notejam/static" \
          "$IMAGE_URI" \
          python /app/notejam/manage.py collectstatic --noinput
       echo "▶︎ sync to s3://$STATIC_BUCKET"
       aws s3 sync --delete static_out/ "s3://$STATIC_BUCKET/static/"

    - name: Invalidate CloudFront
      if: ${{ steps.tf-out.outputs.distro_id != '' }}
      env:
        DISTRO_ID: ${{ steps.tf-out.outputs.distro_id }}
      run: |
        aws cloudfront create-invalidation \
          --distribution-id "$DISTRO_ID" \
          --paths "/static/*"